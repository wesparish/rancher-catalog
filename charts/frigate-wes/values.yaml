
auth: wes:$apr1$sLLQK9lR$NBDb6NtuzOC6sTHxZ1tuC0

ingress:
  enabled: true
  className: "nginx-wes"
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 2000m
    nginx.ingress.kubernetes.io/auth-realm: Authentication Required - Frigate
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-type: basic
  hosts:
    - host: frigate.elastiscale.net
      paths:
        - path: "/"
          pathType: Prefix
  tls:
    - secretName: frigate-elastiscale.net
      hosts:
        - frigate.elastiscale.net
      certificate:
        enabled: false

frigate:
  nodeSelector:
    ceph-client: "true"

  image:
    repository: ghcr.io/blakeblackshear/frigate
    tag: 0.14.1-tensorrt # nvidia gpu
    pullPolicy: IfNotPresent

  env:
    TZ: "America/Chicago"

  envFromSecrets:
    # kubectl -n frigate create secret generic frigate-env-secrets \
    #   --from-literal=FRIGATE_CAMERA_USER=<user> \
    #   --from-literal=FRIGATE_CAMERA_PASSWORD=<pwd>
    - frigate-env-secrets

  config: |
    birdseye:
      enabled: True
      mode: continuous
    ffmpeg:
      output_args:
        # Optional: output args for record streams (default: shown below)
        #record: -f segment -segment_time 10 -segment_format mp4 -reset_timestamps 1 -strftime 1 -c copy -an
        # Record audio also: https://docs.frigate.video/faqs/
        record: -f segment -segment_time 10 -segment_format mp4 -reset_timestamps 1 -strftime 1 -c:v copy -c:a aac
    mqtt:
      # Required: host name
      host: 172.16.1.229
      # Optional: port (default: shown below)
      port: 1883
      # Optional: topic prefix (default: shown below)
      # WARNING: must be unique if you are running multiple instances
      topic_prefix: frigate
      # Optional: client id (default: shown below)
      # WARNING: must be unique if you are running multiple instances
      client_id: frigate
      # Optional: user
      # user: mqtt_user
      # Optional: password
      # NOTE: Environment variables that begin with 'FRIGATE_' may be referenced in {}.
      #       eg. password: '{FRIGATE_MQTT_PASSWORD}'
      # password: password
      # Optional: interval in seconds for publishing stats (default: shown below)
      stats_interval: 60
    detectors:
      tensorrt:                                                                                                                                                               â”‚
        type: tensorrt
    model:
      path: /config/model_cache/tensorrt/yolov7-320.trt
      input_tensor: nchw
      input_pixel_format: rgb
      width: 320
      height: 320
    cameras:
      # Name of your camera
      front_patio:
        ffmpeg:
          inputs:
            - path: rtsp://{FRIGATE_CAMERA_USER}:{FRIGATE_CAMERA_PASSWORD}@172.16.1.83:554//h264Preview_01_main
              roles:
                - detect
                - rtmp
        detect:
          width: 1280
          height: 720
          fps: 5
      back_patio:
        ffmpeg:
          inputs:
            - path: rtsp://{FRIGATE_CAMERA_USER}:{FRIGATE_CAMERA_PASSWORD}@172.16.1.82:554//h264Preview_01_main
              roles:
                - detect
                - rtmp
        detect:
          width: 1280
          height: 720
          fps: 5
      # back_patio_birdfeeder:
      #   ffmpeg:
      #     inputs:
      #       - path: rtsp://{FRIGATE_CAMERA_USER}:{FRIGATE_CAMERA_PASSWORD}@172.16.1.82:554//h264Preview_01_main
      #         roles:
      #           - detect
      #           - rtmp
      #   detect:
      #     width: 1280
      #     height: 720
      #     fps: 5
      #   objects:
      #     track:
      #       - bird
      #     filters:
      #       bird:
      #         # Optional: minimum score for the object to initiate tracking
      #         min_score: 0.1
      #         # Optional: minimum decimal percentage for tracked object's computed score to be considered a true positive
      #         threshold: 0.2
      #         # mask:
      #         #   - 0,720,949,720,955,459,1280,462,1280,378,1280,0,0,0
      #   # motion:
      #   #   mask:
      #   #     - 0,720,949,720,955,459,1280,462,1280,378,1280,0,0,0
      driveway:
        ffmpeg:
          inputs:
            - path: rtsp://{FRIGATE_CAMERA_USER}:{FRIGATE_CAMERA_PASSWORD}@172.16.1.80:554/cam/realmonitor?channel=1&subtype=0
              roles:
                - detect
                - rtmp
        detect:
          width: 2688
          height: 1520
          fps: 5
        objects:
          track:
            - car
            - person
        motion:
          mask:
            - 1280,0,1075,0,936,0,1052,42,1082,56,1176,97,1241,87,1280,91
            - 361,0,0,0,0,132
      hobby_patio:
        ffmpeg:
          inputs:
            - path: rtsp://{FRIGATE_CAMERA_USER}:{FRIGATE_CAMERA_PASSWORD}@172.16.1.9:554/h264Preview_01_main
              roles:
                - detect
                - rtmp
        detect:
          width: 1280
          height: 720
          fps: 5
    record:
      enabled: True
      #retain:
      #  days: 10
      #  mode: motion
      events:
        retain:
          default: 10
      #    mode: motion
    snapshots:
      enabled: True
      # Optional: draw bounding box on the snapshots (default: shown below)
      bounding_box: True
      # Optional: crop the snapshot (default: shown below)
      crop: False
      # Optional: Camera override for retention settings (default: global values)
      retain:
        # Required: Default retention days (default: shown below)
        default: 10

  service:
    # -- Type of Service to use
    type: LoadBalancer
    # -- Port the Service should communicate on
    #port: 5000
    ## Specify the nodePort value for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    # nodePort:
    ## Provide any additional annotations which may be required. This can be used to
    ## set the LoadBalancer service type to internal only.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
    ##
    annotations: #{}
      metallb.universe.tf/address-pool: default
      metallb.universe.tf/allow-shared-ip: default
    #labels: {}

    # -- Set specific IP address for LoadBalancer. `service.type` must be set to `LoadBalancer`
    loadBalancerIP: 172.16.1.235

    # loadBalancerSourceRanges: []
    ## Set the externalTrafficPolicy in the Service to either Cluster or Local
    externalTrafficPolicy: Local

  persistence:
    media:
      enabled: true
      existingClaim: frigate-data
    config:
      enabled: true
      existingClaim: frigate-config
    # Don't think data needs to be persisted?
    # data:
    #   enabled: true
    #   existingClaim: frigate-data

  gpu:
    nvidia:
      enabled: true

  probes:
    startup:
      enabled: true
      failureThreshold: 60
      periodSeconds: 10