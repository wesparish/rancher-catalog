authentik:
  authentik:
    # secret_key: "is this used?"
    email:
      host: mailu-postfix.mailu
      port: 25
      from: authentik@elastiscale.net
    error_reporting:
      enabled: false
    postgresql:
      password: "password"

  server:
    ingress:
      enabled: true
      ingressClassName: nginx-wes
      hosts:
        - authentik.elastiscale.net
      tls:
        - secretName: authentik.elastiscale.net-tls
          hosts:
            - authentik.elastiscale.net
    envFrom:
      # kubectl -n authentik create secret generic authentik-env-secrets \
      #   --from-literal=AUTHENTIK_SECRET_KEY=<50 char string>
      # $(cat /dev/urandom | LC_ALL=C tr -dc 'A-Z' | head -c50)
      - secretRef:
          name: authentik-env-secrets

  worker:
    envFrom:
      - secretRef:
          name: authentik-env-secrets

  postgresql:
    enabled: true
    auth:
      password: "password"
    primary:
      persistence:
        existingClaim: authentik-data
        subPath: postgres-data

  redis:
    enabled: true
    architecture: standalone
    auth:
      enabled: false
    master:
      persistence:
        existingClaim: authentik-data
        subPath: redis-data


# # Default values for authentik-wes.
# # This is a YAML-formatted file.
# # Declare variables to be passed into your templates.

# replicaCount: 1

# image:
#   repository: nginx
#   pullPolicy: IfNotPresent
#   # Overrides the image tag whose default is the chart appVersion.
#   tag: ""

# imagePullSecrets: []
# nameOverride: ""
# fullnameOverride: ""

# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Automatically mount a ServiceAccount's API credentials?
#   automount: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

# podAnnotations: {}
# podLabels: {}

# podSecurityContext: {}
#   # fsGroup: 2000

# securityContext: {}
#   # capabilities:
#   #   drop:
#   #   - ALL
#   # readOnlyRootFilesystem: true
#   # runAsNonRoot: true
#   # runAsUser: 1000

# service:
#   type: ClusterIP
#   port: 80

# ingress:
#   enabled: false
#   className: ""
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: chart-example.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

# resources: {}
#   # We usually recommend not to specify default resources and to leave this as a conscious
#   # choice for the user. This also increases chances charts run on environments with little
#   # resources, such as Minikube. If you do want to specify resources, uncomment the following
#   # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#   # limits:
#   #   cpu: 100m
#   #   memory: 128Mi
#   # requests:
#   #   cpu: 100m
#   #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 100
#   targetCPUUtilizationPercentage: 80
#   # targetMemoryUtilizationPercentage: 80

# # Additional volumes on the output Deployment definition.
# volumes: []
# # - name: foo
# #   secret:
# #     secretName: mysecret
# #     optional: false

# # Additional volumeMounts on the output Deployment definition.
# volumeMounts: []
# # - name: foo
# #   mountPath: "/etc/foo"
# #   readOnly: true

# nodeSelector: {}

# tolerations: []

# affinity: {}
